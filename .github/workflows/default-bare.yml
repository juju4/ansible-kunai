---
name: default-bare

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:  # run weekly, every Tuesday 02:00
    - cron: '0 2 * * 2'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.distribution }}-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: true
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: false
          - distribution: ubuntu
            version: '24.04'
            suite: default-harden
            experimental: true
          - distribution: ubuntu
            version: '24.04'
            suite: default-systemd
            experimental: true
          - distribution: ubuntu
            version: '24.04-arm'
            suite: default
            experimental: true
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: juju4.kunai
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint jmespath
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../:/home/runner/.ansible/roles'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find . -ls
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: verify
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/verify.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
          ps axuw
          netstat -anp
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          set -x
          systemctl -l --no-pager status kunai || true
          systemd-analyze --no-pager security || true
          systemd-analyze --no-pager security kunai || true
          systemd-analyze --no-pager verify 00-kunai || true
          cat /usr/lib/systemd/system/00-kunai.service || true
          cat /etc/systemd/system/00-kunai.service.d/hardening.conf ||Â true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - bpf kernel
        run: |
          set -x
          cat /sys/kernel/security/lsm
          grep BPF /boot/config-*
          cat /proc/cmdline
          sudo grep lsm /boot/grub/grub.cfg
          ls -l /sys/kernel/btf/vmlinux
          grep CONFIG_DEBUG_INFO_BTF /boot/config-*
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - kernel full config
        run: |
          set -x
          ls -l /boot/config-*
          sudo cat /boot/config-*
          cat /sys/kernel/security/lockdown
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - bps
        run: |
          set -x
          sudo env DEBIAN_FRONTEND=noninteractive apt-get install -y bpfcc-introspection bpftool linux-tools-common || true
          sudo bps || true
          sudo bpftool prog show || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - etc
        run: |
          set -x
          cat /etc/systemd/system/kunai.service
          sudo cat /etc/kunai/config.yaml
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - journalctl
        run: |
          set -x
          sudo journalctl -xe -l --no-pager | tail -500
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - EDRTelemetry generator
        run: |
          set -x
          sudo ls -l /tmp/EDR-Telemetry/Tools/Telemetry-Generator/Linux/
          sudo cat /tmp/EDR-Telemetry/Tools/Telemetry-Generator/Linux/function_output_log.csv
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - EDRTelemetry kunai logs
        run: |
          set -x
          sudo grep /tmp/EDR-Telemetry /var/log/kunai/events.log | tee /tmp/edrtelemetry.log | tail -500
          /usr/local/scripts/kunai_report.sh /tmp/edrtelemetry.log
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - kunai logs
        run: |
          set -x
          sudo tail -500 /var/log/kunai/events.log
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - kunai report
        run: |
          set -x
          ls -la /var/tmp/
          sudo /usr/local/scripts/kunai_report.sh
          ls -la /var/tmp/
        if: ${{ always() }}
        continue-on-error: true
